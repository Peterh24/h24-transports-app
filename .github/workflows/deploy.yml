name: Build && deploy

# Ce workflow permet de déployer l'application h24app dans deux environnements :
# - Production : déclenchée par un push sur la branche 'main'
# - Développement : déclenchée par un push sur la branche 'dev'
#
# Le workflow construit une image Docker, la publie dans un registre, puis
# déploie l'application sur le serveur correspondant en utilisant le fichier
# docker-compose approprié.

on:
  push:
    branches:
      - main     # branche de production
      - develop  # branche de développement

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    # Définir les variables d'environnement selon la branche
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract commit hash
        id: vars
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Transférer le script de déploiement sur le serveur distant
      - name: Transfer deploy script
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: ".github/scripts/deploy.sh"
          target: "/tmp"
          strip_components: 2
          use_insecure_cipher: true
          proxy_host: ""

      # Télécharger et fusionner directement les fichiers d'environnement
      - name: Download and merge env files
        run: |
          # Créer un répertoire local pour les fichiers d'environnement
          mkdir -p ./env-files

          # Créer un fichier pour stocker le mot de passe SSH
          echo "${{ secrets.SSH_PASSWORD }}" > ssh_password.txt

          # Télécharger les fichiers directement avec scp en forçant l'authentification par mot de passe
          echo "Téléchargement des fichiers d'environnement..."
          export SSHPASS="${{ secrets.SSH_PASSWORD }}"

          # Installer sshpass pour la gestion du mot de passe en ligne de commande
          sudo apt-get update && sudo apt-get install -y sshpass

          # Utiliser sshpass pour fournir le mot de passe à SCP
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o PreferredAuthentications=password ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/ubuntu/workspace/h24app-envs/.env ./env-files/.env
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o PreferredAuthentications=password ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/ubuntu/workspace/h24app-envs/.env.${{ env.ENVIRONMENT }} ./env-files/.env.${{ env.ENVIRONMENT }}

          # Supprimer le fichier de mot de passe
          rm ssh_password.txt

          # Vérifier que les fichiers ont été téléchargés
          echo "Fichiers téléchargés:"
          ls -la ./env-files/

          # Copier les fichiers à la racine
          echo "Copie des fichiers à la racine..."
          cp ./env-files/.env ./.env
          cp ./env-files/.env.${{ env.ENVIRONMENT }} ./.env.${{ env.ENVIRONMENT }}

          # Fusionner les fichiers directement
          echo "Fusion des fichiers d'environnement..."
          cat .env > .env.merged
          echo "" >> .env.merged
          echo "# Variables spécifiques à l'environnement ${{ env.ENVIRONMENT }}" >> .env.merged
          cat .env.${{ env.ENVIRONMENT }} >> .env.merged
          mv .env.merged .env
          echo "Ajout de la variable APP_ENV"
          echo "APP_ENV=${{ env.ENVIRONMENT }}" >> .env

          # Créer le répertoire pour les fichiers Docker s'il n'existe pas déjà
          mkdir -p deploy-files/docker

          # Copier le fichier .env dans le répertoire deploy-files/docker
          echo "Copie du fichier .env dans le répertoire deploy-files/docker..."
          cp .env deploy-files/.env

          # Afficher des informations sur le fichier fusionné (masqué)
          echo "Fichier d'environnement fusionné:"
          echo "Taille du fichier: $(wc -c < .env) octets"
          echo "Variables (masquées):"
          grep -v "^#" .env | sed 's/=.*/=******/'

      # Vérifier les fichiers d'environnement avant le build
      - name: Verify env files
        run: |
          # Vérifier que le fichier .env existe et contient des données
          echo "Vérification du fichier d'environnement fusionné:"
          if [ ! -s .env ]; then
            echo "ERREUR: Le fichier .env est vide ou n'existe pas"
            exit 1
          fi

          echo "Le fichier .env est prêt pour le build"

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/images/nginx/Dockerfile
          build-args: |
            APP_ENV=${{ env.ENVIRONMENT }}
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}:${{ env.ENVIRONMENT }}-${{ env.COMMIT_HASH }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}:buildcache-${{ env.ENVIRONMENT }}
          cache-to: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}:buildcache-${{ env.ENVIRONMENT }},mode=max

      - name: Prepare Docker files for transfer
        run: |
          echo "Preparing Docker files for transfer..."
          mkdir -p deploy-files
          cp -r docker deploy-files/
          cp .env deploy-files/.env
          ls -la deploy-files

      - name: Transfer Docker files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "deploy-files"
          target: "/tmp"
          use_insecure_cipher: true
          proxy_host: ""

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script_stop: true
          script: chmod +x /tmp/deploy.sh && /tmp/deploy.sh "${{ env.ENVIRONMENT }}" "${{ env.COMMIT_HASH }}" "${{ secrets.DOCKER_REGISTRY }}" "${{ secrets.DOCKER_REPO }}"
          use_insecure_cipher: true
          proxy_host: ""
